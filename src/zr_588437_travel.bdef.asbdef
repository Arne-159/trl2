managed implementation in class zbp_r_588437_travel unique;
strict ( 2 );

//Wurzelknoten Travel
define behavior for ZR_588437_Travel alias Travel
persistent table z588437_atravel
lock master
authorization master ( instance )
//etag master <field_name>
{
  create;
  update;
  delete;
  association _Bookings { create; }

  static action show_test_message;
  action cancel_booking;
  action maintain_booking_fees parameter ZA_588437_BookingFees;
  validation validate_travel_period on save {create;}
  determination determine_travel_id on modify{ update; }

  field (readonly, numbering: managed) TravelUuid;
  field(readonly) TravelId, TotalPrice;
  field(readonly) Createdby, Createdat, Lastchangedby, Lastchangedat;
  field( mandatory:create) AgencyId, BeginDate, CustomerId, EndDate;
  field(readonly : update)AgencyId, BeginDate, CustomerId, EndDate;
  field( mandatory ) Description;

  mapping for z588437_atravel corresponding{
  AgencyId = agency_id;
  BeginDate = begin_date;
  BookingFee = booking_fee;
  CurrencyCode = currency_code;
  CustomerId = customer_id;
  EndDate = end_date;
  TotalPrice = total_price;
  TravelId = travel_id;
  TravelUuid = travel_uuid;
  }
}

//Kindknoten Booking
define behavior for ZR_588437_Booking alias Booking
persistent table z588437_abooking
lock dependent by _Travel
authorization dependent by _Travel
//etag master <field_name>
{
  update;
  delete;
  field (readonly, numbering: managed) BookingUuid;
  field ( readonly ) TravelUuid;
  association _Travel;

  mapping for z588437_abooking corresponding{
    BookingDate = booking_date;
    BookingId = booking_id;
    CustomerId = customer_id;
    BookingUuid = booking_uuid;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    CurrencyCode = currency_code;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    TravelUuid = travel_uuid;
  }
}